== Compiladores

=== Extrutura de um compilador

.Compiladores
image::images/compiladores/SimpleCompiler.png[]

=== Design do LLVM

.Design do LLVM
image::images/compiladores/2-RetargetableCompiler.png[]

* Código intermediário padronizado

.Exemplo código intermediário
----
define i32 @add1(i32 %a, i32 %b) {
entry:
  %tmp1 = add i32 %a, %b
  ret i32 %tmp1
}

define i32 @add2(i32 %a, i32 %b) {
entry:
  %tmp1 = icmp eq i32 %a, 0
  br i1 %tmp1, label %done, label %recurse

recurse:
  %tmp2 = sub i32 %a, 1
  %tmp3 = add i32 %b, 1
  %tmp4 = call i32 @add2(i32 %tmp2, i32 %tmp3)
  ret i32 %tmp4

done:
  ret i32 %b
}
----

////

.Relembrando as classes de complexidade
image::images/compiladores/3-LLVMCompiler1.png[]
////


== Referências

. The Architecture of Open Source Applications: LLVM -- http://www.aosabook.org/en/llvm.html
. PEG Parser Generator for JavaScript -- http://pegjs.majda.cz/
. Parsing Expression Grammars: A Recognition-Based Syntactic Foundation -- http://www.brynosaurus.com/pub/lang/peg.pdf
. The Architecture of Open Source Applications -- http://www.aosabook.org/en/llvm.html
. -- http://www.ibm.com/developerworks/library/os-createcompilerllvm1/
. -- http://llvm.org/docs/tutorial/index.html
. -- http://nathansuniversity.com/pegs.html
. -- https://github.com/PhilippeSigaud/Pegged/wiki/Grammar-Examples

////
Sempre termine os arquivos com uma linha em branco.
////


