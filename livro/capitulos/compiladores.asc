== Compiladores

Ao implementar um compilador para nossa linguagem poderemos executar
os pseudocódigos, possibilitando que os estudantes possam testar
os seus códigos escritos.

Neste capítulos apresentaremos uma estrutura de compilador e uma ferramenta
para auxiliar no desenvolvimento dele.

=== Estrutura de um compilador

Temos uma estrutura de um compilador na <<fig_compilador>>. A seguir
temos uma descrição de cada parte dele:

Fontend::
Os compiladores possuem um `Frontend`, que é responsável por realizar a
análise léxica e sintática do código fonte fornecido.

Otimizador::
Após a análise sintática o compilador pode realizar diversas otimizações,
realizadas num código intermediário.

Backend::
O Backend é responsável por ler o código intermediário e gerar um código
específico de uma plataforma que desejamos atingir.

[[fig_compilador]]
.Compiladores
image::images/compiladores/SimpleCompiler.png[]

Na próxima seção apresentaremos uma ferramenta *LLVM* que auxilia na construções
de compiladores.

=== Design do LLVM

Na <<fig_LLVM>> temos a estrutura da ferramenta *LLVM* que auxiliar na contrução
de compiladores.

Nesta ferramenta nós temos a presença de um ponto fixo, o otimizador é único
e utiliza um código intermediário padronizado. Este recurso trás as seguintes
vantagens:

* Você pode utilizar otimizações implementadas pela comunidade
* Você pode utilizar backends implementados pela comunidade para as plataformas
populares.
* Você pode escrever seu frontend para gerar código em conformidade com outra
linguagem, como C por exemplo. 
* Você pode escrever o seu fontend para gerar o código intermediário, não se
limitando aos recursos de uma linguagem como C.


[[fig_LLVM]]
.Design do LLVM
image::images/compiladores/2-RetargetableCompiler.png[]

Em <<cod_intermediario>> apresentamos um exemplo deste código intermediário.

[[cod_intermediario]]
.Exemplo código intermediário
----
define i32 @add1(i32 %a, i32 %b) {
entry:
  %tmp1 = add i32 %a, %b
  ret i32 %tmp1
}

define i32 @add2(i32 %a, i32 %b) {
entry:
  %tmp1 = icmp eq i32 %a, 0
  br i1 %tmp1, label %done, label %recurse

recurse:
  %tmp2 = sub i32 %a, 1
  %tmp3 = add i32 %b, 1
  %tmp4 = call i32 @add2(i32 %tmp2, i32 %tmp3)
  ret i32 %tmp4

done:
  ret i32 %b
}
----

== Conclusão e trabalhos futuros

Neste relatório apresentamos as PEGs, como uma alternativa para descrição
de gramáticas para elaboração de linguagens de programação, onde a ambiguidade
das Gramáticas Livre de Contexto são indesejadas.

Em seguida apresentamos uma linguagem de Pseudocódigo e uma gramática que a
descreve. Mostramos vários códigos demonstrando a utilização dos recursos
da linguagem. Finalizamos o capítulo demonstrando como provar que a linguagem
seria Turing Completa.

Por último mostramos uma ferramenta *LLVM* que auxilia na construção 
de compiladores.

A indicação que damos de trabalhos futuros seria a produção de um compilador ou 
interpretador para executar a linguagem de Pseudocódigo, utilizando a infraestrutura
do *LLVM*.


== Referências do trabalho

. The Architecture of Open Source Applications: LLVM -- http://www.aosabook.org/en/llvm.html
. PEG Parser Generator for JavaScript -- http://pegjs.majda.cz/
. Parsing Expression Grammars: A Recognition-Based Syntactic Foundation -- http://www.brynosaurus.com/pub/lang/peg.pdf
. The Architecture of Open Source Applications -- http://www.aosabook.org/en/llvm.html
. Create a working compiler with the LLVM framework -- http://www.ibm.com/developerworks/library/os-createcompilerllvm1/
. LLVM Tutorial -- http://llvm.org/docs/tutorial/index.html
. Create your own programming language -- http://nathansuniversity.com/pegs.html
. Grammar Examples -- https://github.com/PhilippeSigaud/Pegged/wiki/Grammar-Examples

////
Sempre termine os arquivos com uma linha em branco.
////


