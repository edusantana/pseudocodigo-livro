== Parsing Expressions Grammars (PEGs)

////
.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* objetivo 1
* objetivo 2
* objetivo N
____________________
////


=== Por que utilizamos Gramáticas livre de contexto

As gramáticas de Chomsky e as expressões regulares foram criadas para
expressar e analizar linguagens naturais.

Devido a elegância e seu poder de expressividade, os cientistas da computação
adotaram estas gramáticas para desenvolver linguagens para máquinas também.

A habilidade das gramáticas livre de contexto de expressar ambiguidade é um
instrumento poderoso para o processamento de linguagens naturais.

=== Utilização das GLC para linguagens de máquinas

As linguagens de máquinas são criadas para serem precisas e 
não ambíguas. Quando utilizamos uma gramática livre de contexto para expressar 
tais linguagens nos deparamos com a ambiguidade mesmo sem desejá-la.

'Parsing Expression Grammars' (PEGs) seguiu como alternativa, para
produção de gramáticas não ambiguas. A ambiguidade da gramática é removida
utilizando atribuindo *prioridades* às alternativas.

Enquanto na notação das GLC as regras são separadas por `|`, indicando um *ou*, 
nas PEGs as regras utilizam `/`, sendo que a regra mais a esquerda tem prioridade
à regra da direita.

=== Exemplos
[NOTE]
====
Você pode utilizar o site a seguir para testar as gramáticas e as regras:

http://pegjs.majda.cz/online
====

[[g1]]
.Gramática 1
----
A="ab"/"a"
----

[[g2]]
.Gramática 2
----
A= "a"/"ab"
----

.Valores para testar
[width="40%",cols="^m,^m",frame="topbot"]
|====
| a | ab
|====

Ao testar `a` e `ab` nas <<g1>> e <<g2>>, é possível identificar a diferença
de uma PEG para uma GLC. Numa *GLC* a ordem das produções não importa, 
`a|ab` e `a|ab` descreverem a mesma gramática. 

A <<g1>> aceita `ab`, pois casa com a primeira regra.
Na PEG, a <<g2>> não aceita *`ab`*,
pois o primeiro `a` de `ab` casa com a regra mais prioritária `a`, o próximo `b`
não terá regras a ser casada pois não há uma regra `b`, apenas `ab`.



[[g3]]
.Gramática 3
----
A = ("a")+ "b"?
----

[[t3]]
.Valores para testar
[width="50%",cols="^m,^m,^m,^m,^m",frame="topbot"]
|====
| a | aa | aab | b | aabb
|====


Na <<g3>> temos uma PEG similar a uma GLC, onde a gramática aceita linguagens
com uma *sequência*, de *no mínimo um* `a` seguindo ou não, de um único `b`.
Apenas os dois últimos valores de <<t3>> não são aceitos.


[[g4]]
.Gramática 4
----
identificador = [a-zA-Z_] [a-zA-Z_0-9]*
----

[[t4]]
.Valores para testar
[width="50%",cols="^m,^m,^m,^m,^m,^m,^m",frame="topbot"]
|====
| nota|Nota2|NOTA_ATUAL|nota_2|`_nota_`|8|2oi
|====

Na <<g4>> nós temos uma representação de um identificador numa linguagem de
programação. Novamente, apenas os dois últimos valores não são aceitos na <<t4>>.

[[g5]]
.Gramática 5
----
string = ["] (!["] .)* ["]
----

[[t5]]
.Valores para testar
[width="100%",cols="^m,^m,^m,^m,^m,^m",frame="topbot"]
|====
| ""
| "Teste!"
| "....."
| "abraca

dabra"
| """
| "<a href="http://ufpb.br">UFPB</a>"
|====





[[g6]]
.Gramática 6
----
EndOfFile = !.
----




// NOTE: O "ab" não funcionou porque a primeira regra foi casada primeiro.

=== Implementação dos Parsers para os PEGs

* *Tempo exponencial* no pior caso -- devido ao 'lookahead'
* É possível implementá-lo em *tempo linear* utilizando memória
** Na prática, se não houver memória suficiente, os cálculos terão que ser refeitos, demorando um pouco mais.

.Relembrando as classes de complexidade
image::images/classes-complexidades.png[]

////
Sempre termine os arquivos com uma linha em branco.
////


