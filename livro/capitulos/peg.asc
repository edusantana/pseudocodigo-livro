== Parsing Expressions Grammars (PEGs)

////
.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* objetivo 1
* objetivo 2
* objetivo N
____________________
////

Neste lugar você deve apresentar o conteúdo em forma de diálogo.

NOTE: Para começar a escrever um novo capítulo, copie este arquivo e 
salve com outro nome (não utilize espaço no nome do arquivo). Em seguida,
atualize o arquivo *livro.asc* para incluir o novo arquivo criado. 
Consulte o manual.


=== Por que utilizamos Gramáticas livre de contexto

As gramáticas de Chomsky e as expressões regulares foram criadas para
expressar e analizar linguagens naturais.

Devido a elegância e seu poder de expressividade, os cientistas da computação
adoratam estas gramáticas para desenvolver linguagens para máquinas também.

A habilidade das gramáticas livre de contexto de expressar ambiguidade é
instrumento poderoso para o processamento de linguagens naturais.

=== Utilização das GLC para linguagens de máquinas

As linguagens de máquinas são criadas para serem precisas e 
não ambiguas. Quando utilizamos uma gramática livre de contexto para expressar 
tais linguagens nos deparamos com ela mesmo sem desejá-la.

Parsing Expression Grammars (PEGs) seguiu como alternativa, para
produção de gramáticas não ambiguas. A ambiguidade da gramática é removida
utilizando atribuíndo *prioridades* às alternativas.

Enquanto nas GLC as regas são separadas por `|`, indicando um *ou*, nas PEGs
as regras utilizam `/`, sendo que a regra mais a esquerda tem prioridade
à direita.



=== Exemplos

Teste as gramáticas em: http://pegjs.majda.cz/online

.Gramática
----
A="ab"/"a"
----

.Valores para testar
....
a
ab
....

.Gramática
----
A= "a"/"ab"
----

.Valores para testar
....
a
ab
....

.Gramática
----
A = ("a")+ "b"?
----

.Valores para testar
....
a
aa
aab
b
aabb
....

.Gramática
----
identificador = [a-zA-Z_] [a-zA-Z_0-9]*
----
....
nota
Nota2
NOTA_ATUAL
nota_2
_nota_
8
2oi
....


.Gramática
----
string = ["] (!["] .)* ["]
----

....
""
"Teste!"
"....."
"abraca
dabra"
"""
"<a href="http://ufpb.br">UFPB</a>"
....



// NOTE: O "ab" não funcionou porque a primeira regra foi casada primeiro.

=== Parser

* *Tempo exponencial* no pior caso -- devido ao 'lookahead'
* É possível implementá-lo em *tempo linear* utilizando memória
** Na prática, se não houver memória suficiente, os cálculos terão que ser refeitos, demorando um pouco mais.

.Relembrando as classes de complexidade
image::images/classes-complexidades.png[]

////
Sempre termine os arquivos com uma linha em branco.
////


